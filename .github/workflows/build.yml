name: Compile and Package into Debian
on:
  push:
    branches: [ main ]

    paths-ignore:
      - 'buildx/other/**'
      - '.github/workflows/build-other.yml'
      - 'stage*/**'

  pull_request:
    types: [opened, synchronize, reopened]

env:
  # give this a run number to avoid a lengthy build
  # ie when just testing the docker/downstream stuff
  fetchassets: ''

jobs:
  compile:

    runs-on: ubuntu-20.04
    permissions:
      packages: write

    strategy:
      matrix:
        include:
          # aarch64 is 64bit, armv7 is 32 bit. 
          - arch: aarch64
            distro: bullseye
            dockerarch: arm64
          # - arch: armv7
          #   distro: bullseye
          #   dockerarch: armhf
          - arch: amd64
            dockerarch: amd64

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: arm builds
        if: matrix.arch != 'amd64' && env.fetchassets==''
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          # github.token doesn't grant access into packages
          # githubToken: ${{ secrets.PUSH_PACKAGE }}
          githubToken: ${{ github.token }}
          install: |
            apt update && apt upgrade -y
            apt install -y libboost-all-dev
            apt install -y gstreamer1.0-plugins-base \
              gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
              gstreamer1.0-plugins-ugly gstreamer1.0-libav \
              gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa \
              gstreamer1.0-gl  
            apt install -y libpango1.0-dev
            apt install -y libavfilter-dev
            apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
              libgstreamer-plugins-bad1.0-dev 
            apt install -y libgstrtspserver-1.0-dev
            apt install -y libmariadb-dev libgps-dev
            apt install -y build-essential
            apt install -y cmake fakeroot
            apt install -y libgps-dev
            apt install -y libavahi-client-dev libavahi-glib-dev

          run: |
              make github ARCH=${{ matrix.dockerarch }} DEBARCH=${{ matrix.arch }}

      - name: amd build
        if: matrix.arch == 'amd64' && env.fetchassets==''
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y libboost-all-dev
          sudo apt install -y gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
            gstreamer1.0-plugins-ugly gstreamer1.0-libav \
            gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa \
            gstreamer1.0-gl  
          sudo apt install -y libpango1.0-dev
          sudo apt install -y libavfilter-dev
          sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            libgstreamer-plugins-bad1.0-dev 
          sudo apt install -y libgstrtspserver-1.0-dev
          sudo apt install -y libmariadb-dev
          sudo apt install -y build-essential
          sudo apt install -y cmake fakeroot
          sudo apt install -y libgps-dev
          sudo apt install -y libavahi-client-dev libavahi-glib-dev

          make github ARCH=${{ matrix.dockerarch }}
   
        shell: bash

      - name: artifact
        if: env.fetchassets==''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.dockerarch }}.deb
          path: |
            ./*${{ matrix.dockerarch }}.deb

  docker-dashcam:
    runs-on: ubuntu-20.04
    permissions:
      # or the push fails
      packages: write
    needs: compile
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: fetch
        if: env.fetchassets==''
        uses: actions/download-artifact@v4.1.8
        with:
          path: ./

      - name: fetch
        if: env.fetchassets!=''
        uses: actions/download-artifact@v4.1.8
        with:
          path: ./
          run_id: ${{ env.fetchassets }} 
  
     
      - name: tree
        run: |
          tree
        shell: bash

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}        

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: buildx/Dockerfile.ringbuffer
          cache-from: type=gha
          cache-to: type=gha
          platforms: linux/arm64,linux/amd64
          #,linux/arm/v7
          push: true
          tags: ghcr.io/barneyman/ringbuffer
          labels: |
            latest
            unstable
          build-args: |
            STARTAPP=ringbuffer


